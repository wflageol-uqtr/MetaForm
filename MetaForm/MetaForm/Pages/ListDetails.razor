@page "/list-details/{id:int}"
@using MetaForm.Data
@using MetaForm.models
@inject ListService ListService
@inject NavigationManager Navigation

<h3>@list?.Name</h3>

@if (list != null)
{
    <h4>Columns</h4>
    <input @bind="newColumnName" placeholder="New Column Name" />
    <button @onclick="AddColumn">Add Column</button>

    <table class="table">
        <thead>
            <tr>
                @foreach (var column in list.Columns)
                {
                    <th>@column</th>
                }
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in list.Items)
            {
                <tr>
                    @foreach (var column in list.Columns)
                    {
                        <td>
                            <input @bind="item.Values[column]" placeholder="@column" />
                        </td>
                    }
                    <td>
                        <button @onclick="() => RemoveItem(item.Id)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="AddNewItem">Add New Item</button>
    <button @onclick="DeleteList">Delete List</button>
    <button @onclick="UpdateList">Update List</button>
}
else
{
    <p>List not found. <a href="/lists">Return to lists</a></p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private List list;
    private string newColumnName;

    protected override async Task OnInitializedAsync()
    {
        list = await ListService.GetListAsync(Id);

        if (list == null)
        {
            Navigation.NavigateTo("/lists");
        }
    }

    private async Task AddColumn()
    {
        if (!string.IsNullOrEmpty(newColumnName))
        {
            await ListService.AddColumnAsync(Id, newColumnName);
            newColumnName = string.Empty;
            list = await ListService.GetListAsync(Id); // Refresh the list
        }
    }

    private async Task AddNewItem()
    {
        var newItemValues = new Dictionary<string, string>();
        foreach (var column in list.Columns)
        {
            newItemValues[column] = string.Empty;
        }

        await ListService.AddListItemAsync(Id, newItemValues);
        list = await ListService.GetListAsync(Id); // Refresh the list
    }

    private async Task RemoveItem(int itemId)
    {
        await ListService.RemoveListItemAsync(Id, itemId);
        list = await ListService.GetListAsync(Id); // Refresh the list
    }

    private async Task DeleteList()
    {
        await ListService.DeleteListAsync(Id);
        Navigation.NavigateTo("/lists");
    }

    private async Task UpdateList()
    {
        await ListService.UpdateListAsync(list);
        Navigation.NavigateTo("/lists");
    }
}
