@page "/associate-file/{fileName}"
@using MetaForm.Data
@using MetaForm.models
@inject ListService ListService
@inject NavigationManager Navigation
@inject IJSRuntime JS

@code {
    [Parameter] public string FileName { get; set; } = string.Empty;
    private List? selectedList = null;
    private string Message { get; set; } = string.Empty;
    private Dictionary<string, string> newItem = new();
    private bool showAddNewItem = false;
    private bool isCreatingNewItem = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var selectedListIdString = await JS.InvokeAsync<string>("localStorage.getItem", "selectedListId");

            if (int.TryParse(selectedListIdString, out var listId))
            {
                selectedList = await ListService.GetListAsync(listId);
                if (selectedList == null)
                {
                    Message = "List not found.";
                }
            }
            else
            {
                Message = "Invalid List ID in localStorage.";
            }

            InitializeNewItem();
        }
        catch (Exception ex)
        {
            Message = $"Error initializing component: {ex.Message}";
        }
    }

    private void InitializeNewItem()
    {
        if (selectedList != null)
        {
            newItem = new Dictionary<string, string>();
            foreach (var column in selectedList.Columns)
            {
                newItem[column] = string.Empty;
            }
            newItem["Id"] = (selectedList.Items.Count + 1).ToString(); // Assign a unique ID
        }
    }

    private async Task AssociateFileWithItem(Dictionary<string, string> item)
    {
        try
        {
            var filePath = await JS.InvokeAsync<string>("localStorage.getItem", "uploadedFilePath");
            if (selectedList != null && !string.IsNullOrEmpty(filePath))
            {
                item["FilePath"] = filePath;
                await ListService.UpdateListAsync(selectedList);
                Message = $"File associated successfully with item {item["Id"]}.";
                Navigation.NavigateTo($"/view-file/{FileName}");
            }
            else
            {
                Message = "File path or selected list is invalid.";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error associating file: {ex.Message}";
        }
    }

    private async Task AddNewItem()
    {
        if (isCreatingNewItem) return;
        isCreatingNewItem = true;

        try
        {
            if (selectedList != null)
            {
                selectedList.Items.Add(newItem);
                await ListService.UpdateListAsync(selectedList);
                Message = "New item added successfully.";
                showAddNewItem = false;
                InitializeNewItem(); // Re-initialize for next new item
            }
            else
            {
                Message = "Selected list is invalid.";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error adding new item: {ex.Message}";
        }
        finally
        {
            isCreatingNewItem = false;
        }
    }
}

<h3>Associate File: @FileName</h3>

@if (selectedList != null)
{
    <button @onclick="() => showAddNewItem = true">Add New Item</button>
    @if (showAddNewItem)
    {
        <div>
            <h4>Add New Item</h4>
            @foreach (var column in selectedList.Columns)
            {
                <input @bind="newItem[column]" placeholder="@column" />
            }
            <button @onclick="AddNewItem">Save Item</button>
            <button @onclick="() => showAddNewItem = false">Cancel</button>
        </div>
    }

    @if (selectedList.Items.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    @foreach (var column in selectedList.Columns)
                    {
                        <th>@column</th>
                    }
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in selectedList.Items)
                {
                    <tr>
                        @foreach (var column in selectedList.Columns)
                        {
                            <td>@(item.ContainsKey(column) ? item[column] : "N/A")</td>
                        }
                        <td>
                            <button @onclick="() => AssociateFileWithItem(item)">Associate File</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No items found in the list. Please add a new item.</p>
    }
}
else
{
    <p>@Message</p>
}
