@page "/upload-file"
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment WebHostEnvironment
@inject NavigationManager NavigationManager

<h3>Upload HTML and JavaScript Files</h3>

<div>
    <label for="htmlFile">Select HTML File:</label>
    <InputFile id="htmlFile" OnChange="StoreHtmlFile" />
</div>

<div>
    <label for="jsFile">Select JavaScript File:</label>
    <InputFile id="jsFile" OnChange="StoreJsFile" />
</div>

<div>
    <button @onclick="HandleFileSelected">Upload Files</button>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

<h3>Uploaded Files</h3>

@if (UploadedFiles != null && UploadedFiles.Any())
{
    <ul>
    @foreach (var file in UploadedFiles)
    {
        <li>
            <button @onclick="() => ViewFile(file)">@file</button>
            <button @onclick="() => DeleteFile(file)">Delete</button>
        </li>
    }
    </ul>
}
else
{
    <p>No files uploaded.</p>
}

@code {
    private IBrowserFile SelectedHtmlFile { get; set; }
    private IBrowserFile SelectedJsFile { get; set; }
    private string Message { get; set; }
    private List<string> UploadedFiles { get; set; }

    protected override void OnInitialized()
    {
        LoadUploadedFiles();
    }

    private void StoreHtmlFile(InputFileChangeEventArgs e)
    {
        SelectedHtmlFile = e.File;
        Message = "HTML file selected: " + SelectedHtmlFile.Name;
    }

    private void StoreJsFile(InputFileChangeEventArgs e)
    {
        SelectedJsFile = e.File;
        Message = "JavaScript file selected: " + SelectedJsFile.Name;
    }

    private async Task HandleFileSelected()
    {
        if (SelectedHtmlFile != null && SelectedJsFile != null)
        {
            var htmlFileNameWithoutExtension = Path.GetFileNameWithoutExtension(SelectedHtmlFile.Name);
            var jsFileNameWithoutExtension = Path.GetFileNameWithoutExtension(SelectedJsFile.Name);

            if (htmlFileNameWithoutExtension == jsFileNameWithoutExtension)
            {
                var htmlUploadPath = Path.Combine(WebHostEnvironment.WebRootPath, SelectedHtmlFile.Name);
                var jsUploadPath = Path.Combine(WebHostEnvironment.WebRootPath, SelectedJsFile.Name);

                using (var htmlStream = SelectedHtmlFile.OpenReadStream())
                {
                    using (var htmlFileStream = new FileStream(htmlUploadPath, FileMode.Create))
                    {
                        await htmlStream.CopyToAsync(htmlFileStream);
                    }
                }

                using (var jsStream = SelectedJsFile.OpenReadStream())
                {
                    using (var jsFileStream = new FileStream(jsUploadPath, FileMode.Create))
                    {
                        await jsStream.CopyToAsync(jsFileStream);
                    }
                }

                Message = $"Files uploaded successfully: {SelectedHtmlFile.Name} and {SelectedJsFile.Name}";
                LoadUploadedFiles(); // Recharge la liste des fichiers téléversés
            }
            else
            {
                Message = "The HTML and JavaScript files must have the same name.";
            }
        }
        else
        {
            Message = "Both HTML and JavaScript files must be selected.";
        }
    }

    private void LoadUploadedFiles()
    {
        var uploadDirectory = WebHostEnvironment.WebRootPath;
        UploadedFiles = Directory.GetFiles(uploadDirectory, "*.html").Select(Path.GetFileName).ToList();
    }

    private void DeleteFile(string fileName)
    {
        var filePathHtml = Path.Combine(WebHostEnvironment.WebRootPath, fileName);
        var filePathJs = Path.Combine(WebHostEnvironment.WebRootPath, Path.ChangeExtension(fileName, ".js"));

        if (System.IO.File.Exists(filePathHtml))
        {
            System.IO.File.Delete(filePathHtml);
            if (System.IO.File.Exists(filePathJs))
            {
                System.IO.File.Delete(filePathJs);
            }
            Message = $"Files deleted: {fileName} and {Path.GetFileName(filePathJs)}";
            LoadUploadedFiles(); // Recharge la liste des fichiers téléversés
        }
        else
        {
            Message = "File not found.";
        }
    }

    private void ViewFile(string fileName)
    {
        NavigationManager.NavigateTo($"/view-file/{fileName}");
    }
}
