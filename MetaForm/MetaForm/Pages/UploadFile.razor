@page "/upload-file"
@using MetaForm.Data
@using MetaForm.models
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@inject IWebHostEnvironment WebHostEnvironment
@inject NavigationManager NavigationManager
@inject FormDataService FormDataService
@inject ListService ListService
@inject IJSRuntime JS

<h3>Upload HTML File</h3>

<!-- Section pour sélectionner un fichier -->
<div>
    <InputFile OnChange="StoreFile" />
</div>

<!-- Section pour sélectionner une liste -->
<div>
    <label for="listSelect">Select List:</label>
    <select id="listSelect" @onchange="ListSelected">
        <option value="">Select List</option>
        @foreach (var list in lists)
        {
            <option value="@list.Id">@list.Name</option>
        }
    </select>
</div>

@if (SelectedFile != null)
{
    <!-- Bouton pour téléverser le fichier -->
    <div>
        <button @onclick="HandleFileSelected">Upload File</button>
    </div>
}

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

<!-- Liste des fichiers téléversés -->
<h3>Uploaded Files</h3>

@if (UploadedFiles != null && UploadedFiles.Any())
{
    <ul>
        @foreach (var file in UploadedFiles)
        {
            <li>
                <button @onclick="() => NavigateToAssociateFile(file)">@file</button>
                <button @onclick="() => DeleteFile(file)">Delete</button>
            </li>
        }
    </ul>
}
else
{
    <p>No files uploaded.</p>
}

@code {
    private IBrowserFile SelectedFile { get; set; } = null!;
    private string Message { get; set; } = string.Empty;
    private List<string> UploadedFiles { get; set; } = new List<string>();
    private List<List> lists = new List<List>();
    private int? selectedListId;
    private Dictionary<string, int> uploadedFileToList = new Dictionary<string, int>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Initializing component...");
            lists = await ListService.GetListsAsync();
            Console.WriteLine("Loaded lists: " + JsonSerializer.Serialize(lists));
            LoadUploadedFiles();
            var uploadedFileToListJson = await JS.InvokeAsync<string>("localStorage.getItem", "uploadedFileToList");
            if (!string.IsNullOrEmpty(uploadedFileToListJson))
            {
                uploadedFileToList = JsonSerializer.Deserialize<Dictionary<string, int>>(uploadedFileToListJson) ?? new Dictionary<string, int>();
            }
        }
        catch (Exception ex)
        {
            Message = $"Error initializing component: {ex.Message}";
            Console.WriteLine("Error initializing component: " + ex);
        }
    }

    private async void StoreFile(InputFileChangeEventArgs e)
    {
        try
        {
            SelectedFile = e.File;
            Message = "File selected: " + SelectedFile.Name;
            Console.WriteLine("File selected: " + SelectedFile.Name);

            // Enregistrer le chemin du fichier et le nom dans localStorage
            var uploadPath = Path.Combine(WebHostEnvironment.WebRootPath, "uploads", SelectedFile.Name);
            await JS.InvokeVoidAsync("localStorage.setItem", "uploadedFilePath", uploadPath);
            await JS.InvokeVoidAsync("localStorage.setItem", "uploadedFileName", SelectedFile.Name);
            Console.WriteLine("Stored file path and name in localStorage.");
        }
        catch (Exception ex)
        {
            Message = $"Error selecting file: {ex.Message}";
            Console.WriteLine("Error selecting file: " + ex);
        }
    }

    private async Task HandleFileSelected()
    {
        try
        {
            if (SelectedFile != null && selectedListId.HasValue)
            {
                var uploadPath = Path.Combine(WebHostEnvironment.WebRootPath, "uploads", SelectedFile.Name);
                Console.WriteLine("Uploading file to: " + uploadPath);

                using (var stream = SelectedFile.OpenReadStream())
                {
                    using (var fileStream = new FileStream(uploadPath, FileMode.Create))
                    {
                        await stream.CopyToAsync(fileStream);
                    }
                }

                // Ajouter l'association fichier-liste
                uploadedFileToList[SelectedFile.Name] = selectedListId.Value;
                var uploadedFileToListJson = JsonSerializer.Serialize(uploadedFileToList);
                await JS.InvokeVoidAsync("localStorage.setItem", "uploadedFileToList", uploadedFileToListJson);

                Message = "File uploaded successfully!";
                Console.WriteLine("File uploaded successfully.");
                LoadUploadedFiles();
            }
            else
            {
                Message = "Please select a file and a list.";
                Console.WriteLine("File or list not selected.");
            }
        }
        catch (Exception ex)
        {
            Message = $"Error uploading file: {ex.Message}";
            Console.WriteLine("Error uploading file: " + ex);
        }
    }

    private void NavigateToAssociateFile(string fileName)
    {
        Console.WriteLine("Navigating to associate file: " + fileName);
        NavigationManager.NavigateTo($"/associate-file/{fileName}");
    }

    private void LoadUploadedFiles()
    {
        try
        {
            Console.WriteLine("Loading uploaded files...");
            var uploadDirectory = Path.Combine(WebHostEnvironment.WebRootPath, "uploads");
            if (!Directory.Exists(uploadDirectory))
            {
                Directory.CreateDirectory(uploadDirectory);
            }
            UploadedFiles = Directory.GetFiles(uploadDirectory, "*.html").Select(Path.GetFileName).ToList();
            Console.WriteLine("Loaded files: " + JsonSerializer.Serialize(UploadedFiles));
        }
        catch (Exception ex)
        {
            Message = $"Error loading uploaded files: {ex.Message}";
            Console.WriteLine("Error loading uploaded files: " + ex);
        }
    }

    private void DeleteFile(string fileName)
    {
        try
        {
            var filePath = Path.Combine(WebHostEnvironment.WebRootPath, "uploads", fileName);
            if (System.IO.File.Exists(filePath))
            {
                System.IO.File.Delete(filePath);
                Message = $"File deleted: {fileName}";
                Console.WriteLine("File deleted: " + fileName);
                LoadUploadedFiles();
                uploadedFileToList.Remove(fileName);
                var uploadedFileToListJson = JsonSerializer.Serialize(uploadedFileToList);
                JS.InvokeVoidAsync("localStorage.setItem", "uploadedFileToList", uploadedFileToListJson);
            }
            else
            {
                Message = "File not found.";
                Console.WriteLine("File not found: " + fileName);
            }
        }
        catch (Exception ex)
        {
            Message = $"Error deleting file: {ex.Message}";
            Console.WriteLine("Error deleting file: " + ex);
        }
    }

    private async Task ListSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var listId))
        {
            selectedListId = listId;
            Console.WriteLine("List selected: " + selectedListId);
            await JS.InvokeVoidAsync("localStorage.setItem", "selectedListId", selectedListId.ToString());
        }
    }
}
