@page "/upload-file"
@using MetaForm.Data
@using MetaForm.Models
@using MetaForm.models
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@inject IWebHostEnvironment WebHostEnvironment
@inject NavigationManager NavigationManager
@inject FormDataService FormDataService
@inject ListService ListService
@inject IJSRuntime JS

<h3>Upload HTML File</h3>

<!-- Section pour sélectionner un fichier -->
<div>
    <InputFile OnChange="StoreFile" />
</div>

<!-- Section pour sélectionner une liste -->
<div>
    <label for="listSelect">Select List:</label>
    <select id="listSelect" @onchange="ListSelected">
        <option value="">Select List</option>
        @foreach (var list in lists)
        {
            <option value="@list.Id">@list.Name</option>
        }
    </select>
</div>

@if (selectedListId.HasValue && SelectedFile != null)
{
    <!-- Bouton pour téléverser le fichier -->
    <div>
        <button @onclick="HandleFileSelected">Upload File</button>
    </div>
}

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

<!-- Liste des fichiers téléversés -->
<h3>Uploaded Files</h3>

@if (UploadedFiles != null && UploadedFiles.Any())
{
    <ul>
        @foreach (var file in UploadedFiles)
        {
            <li>
                <button @onclick="() => ViewFile(file)">@file</button>
                <button @onclick="() => DeleteFile(file)">Delete</button>
            </li>
        }
    </ul>
}
else
{
    <p>No files uploaded.</p>
}

@code {
    private IBrowserFile SelectedFile { get; set; } = null!;
    private string Message { get; set; } = string.Empty;
    private List<string> UploadedFiles { get; set; } = new List<string>();
    private List<List> lists = new List<List>();
    private int? selectedListId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            lists = await ListService.GetListsAsync();
            LoadUploadedFiles();
        }
        catch (Exception ex)
        {
            Message = $"Error initializing component: {ex.Message}";
        }
    }

    private async void StoreFile(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
        Message = "File selected: " + SelectedFile.Name;
        // Enregistrer le chemin du fichier et le nom dans localStorage
        var uploadPath = Path.Combine(WebHostEnvironment.WebRootPath, "uploads", SelectedFile.Name);
        await JS.InvokeVoidAsync("localStorage.setItem", "uploadedFilePath", uploadPath);
        await JS.InvokeVoidAsync("localStorage.setItem", "uploadedFileName", SelectedFile.Name);
    }

    private async Task HandleFileSelected()
    {
        try
        {
            if (SelectedFile != null && selectedListId.HasValue)
            {
                var uploadPath = Path.Combine(WebHostEnvironment.WebRootPath, "uploads", SelectedFile.Name);

                using (var stream = SelectedFile.OpenReadStream())
                {
                    using (var fileStream = new FileStream(uploadPath, FileMode.Create))
                    {
                        await stream.CopyToAsync(fileStream);
                    }
                }

                Message = "File uploaded successfully!";
                LoadUploadedFiles();
            }
            else
            {
                Message = "Please select a file and a list.";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
    }

    private void LoadUploadedFiles()
    {
        var uploadDirectory = Path.Combine(WebHostEnvironment.WebRootPath, "uploads");
        if (!Directory.Exists(uploadDirectory))
        {
            Directory.CreateDirectory(uploadDirectory);
        }
        UploadedFiles = Directory.GetFiles(uploadDirectory, "*.html").Select(Path.GetFileName).ToList();
    }

    private void DeleteFile(string fileName)
    {
        var filePath = Path.Combine(WebHostEnvironment.WebRootPath, "uploads", fileName);
        if (System.IO.File.Exists(filePath))
        {
            System.IO.File.Delete(filePath);
            Message = $"File deleted: {fileName}";
            LoadUploadedFiles();
        }
        else
        {
            Message = "File not found.";
        }
    }

    private void ViewFile(string fileName)
    {
        NavigationManager.NavigateTo($"/view-file/{fileName}");
    }

    private async Task ListSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var listId))
        {
            selectedListId = listId;
            // Navigation vers list-details pour sélectionner l'item et associer le fichier
            NavigationManager.NavigateTo($"/list-details/{selectedListId.Value}");
        }
    }
}
